setwd("~/Desktop/Dropbox/CV/stats")
library("scholar")
#heath
predict_h_index(id="ytApUl0AAAAJ")
setwd("~/Desktop/Dropbox/gitrepos/Sex-Autosome-Fusion/dros.analysis")
library(ape)
# read in the tree and data
tree <- read.nexus("tree.nex")
dat <- read.csv("drosdata.csv",
as.is = T, header = T)[, 1:4]
colnames(dat) <- c("sp", "hap",
"scs", "sim.state")
# trim the data and phylogeny to match
dat <- dat[dat$sp %in% tree$tip.label, ]
tree <- keep.tip(tree, dat$sp)
# lets reorder tip data to match tree order
new.dat <- dat
for(i in 1:nrow(dat)){
hit <- which(dat$sp == tree$tip.label[i])
new.dat[i, ] <- dat[hit, ]
}
dat <- new.dat
rm(new.dat)
plot(tree, cex = .3)
tiplabels(pch = 16, cex = .4,
col = c("red", "blue")[as.factor(dat$scs)])
library(phytools)
# lets read in the transition matrix
# that describes our model of karyotype
# evolution
mat <- as.matrix(read.csv("transition.matrix.csv",
header = F))
x <- matrix(0,  nrow=nrow(dat), 8)
rownames(x) <- dat$sp
for(i in 1:nrow(x)){
x[i, dat$sim.state[i]] <- 1
}
colnames(x) <- 1:8
hists <- make.simmap(tree,
x = x,
model = mat,
pi = c(0, 0, 0, 1, 0, 0, 0, 0),
nsim = 1000)
plotSimmap(hists)
counts <- describe.simmap(hists)$count
colnames(counts)[c(9, 17, 25, 33, 41, 49, 57)]
AAfusioncounts <- rowSums(counts[, c(9, 17, 25, 33, 41, 49, 57)])
colnames(counts)[c(12, 20, 28)]
ASfusioncounts <- rowSums(counts[,c(12, 20, 28)])
obspropSA <- ASfusioncounts/AAfusioncounts
library(evobiR)
# diploid autosome count
# sim.state   #dipa count
#    1            4
#    2            6
#    3            8
#    4            10
#    5            4
#    6            6
#    7            7
#    8            10
expSA <- c()
for(i in 1:1000){
times <- describe.simmap(hists[[i]])$times[2, ]
sa4 <- Pfsa(Da = 4, scs = "XY")
sa6 <- Pfsa(Da = 6, scs = "XY")
sa8 <- Pfsa(Da = 8, scs = "XY")
sa10 <- Pfsa(Da = 10, scs = "XY")
expSA[i] <- sum(sa4 * times[c(1, 5)],
sa6 * times[c(2, 6)],
sa8 * times[c(3, 7)],
sa10 * times[c(4, 8)])
}
plot(density(expSA, bw = .009),
xlim = c(.1, .5), main = "",
xlab = "Proportion sex-autosome fusion",
cex.axis = .7, cex.lab = .7)
plot(density(expSA, bw = .009),
xlim = c(.1, .5), main = "",
xlab = "Proportion sex-autosome fusion",
cex.axis = .7, cex.lab = .7)
polygon(density(expSA, bw = .009),
col = rgb(1, 0, 0, .3))
lines(density(obspropSA))
polygon(density(obspropSA),
col = rgb(0, 0, 1, .3))
points(x = c(.1, .1),
y = c(40, 35),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)))
text(x = c(.1, .1),
y = c(40, 35),
labels = c("Expected", "Inferred"),
pos = 4, cex = .6)
mean(obspropSA)
library(coda)
HPDinterval(as.mcmc(obspropSA))
HPDinterval(as.mcmc(expSA))
Pfsa(Da = 14, scs = "XY")
Pfsa(Da = 28, scs = "XY")
Pfsa(Da = 30, scs = "XY")
Pfsa(Da = 26, scs = "XY")
.59*.133+.22*.125+.1*.143+.09*.133
######
# Pfsa <- function(Da, scs){
#   if(scs=="XO"){
#     Xs <- 1
#     Y <- 0
#     Ds <- Da + 1
#     Dd <- Da + 2
#   }
#   if(scs=="XY"){
#     Xs <- 1
#     Y <- 1
#     Ds <- Da + 2
#     Dd <- Da + 2
#   }
#   if(scs=="XYY"){
#     Xs <- 1
#     Y <- 2
#     Ds <- Da + 3
#     Dd <- Da + 2
#   }
#   if(scs=="XXY"){
#     Xs <- 2
#     Y <- 1
#     Ds <- Da + 3
#     Dd <- Da + 4
#   }
#   res <- 1 - ((Da*(Da-2)+2*Xs*(2*Xs-2))/(2*Dd*(Dd-2))) -
#              ((Da*(Da-2)+max(c(Xs,Y))*(max(c(Xs,Y))-1))/(2*Ds*(Ds-2)))
#   return(res)
# }
# SimpPfsa <- function(Da, scs){
#   if(scs=="XO"){
#     Xs <- 1
#     Y <- 0
#     Ds <- Da + 1
#     Dd <- Da + 2
#   }
#   if(scs=="XY"){
#     Xs <- 1
#     Y <- 1
#     Ds <- Da + 2
#     Dd <- Da + 2
#   }
#   if(scs=="XYY"){
#     Xs <- 1
#     Y <- 2
#     Ds <- Da + 3
#     Dd <- Da + 2
#   }
#   if(scs=="XXY"){
#     Xs <- 2
#     Y <- 1
#     Ds <- Da + 3
#     Dd <- Da + 4
#   }
#   res <- ((2*Da*Xs + 2*Da*Y) / (2*Ds^2 - 4*Ds)) +
#          ((4*Da*Xs) / (2*Dd^2 - 4*Dd))
#   return(res)
# }
#####
# function for P(SA)
Pfsa <- function(Da, scs, mud = 0.5){
#splitting the scs string apart
sexchroms <- toupper(strsplit(scs, split = "")[[1]])
# determining sex chromosome system
if("X" %in% sexchroms){
# counting the number of sex chromosomes
Xs <- sum(sexchroms == "X")
Y <- sum(sexchroms == "Y")
# calculating other parameters
Ds <- Da + Xs + Y
Dd <- Da + 2 * Xs
# performing the calculation
res <- 1 - mud * ((Da * (Da - 2) + 4 * Xs * (Xs - 1)) / (Dd * (Dd - 2))) -
(1 - mud) * (((Xs * (Xs - 1))/(Ds * (Da + Xs - 1))) +
((Y * (Y - 1))/(Ds * (Da + Y - 1))) +
((Da * (Da - 2))/(Ds * (Ds - 2))))
# determining sex chromsome system
}else if("Z" %in% sexchroms){
# counting sex chromosome
Zd <- sum(sexchroms == "Z")
W <- sum(sexchroms == "W")
# calculating other paramters
Dd <- Da + Zd + W
Ds <- Da + 2 * Zd
mus <- 1-mud
# performing the calculation
res <- 1 - mus * ((Da * (Da - 2) + 4 * Zd * (Zd - 1)) / (Ds * (Ds - 2))) -
(1 - mus) * (((Zd * (Zd - 1))/(Dd * (Da + Zd - 1))) +
((W * (W - 1))/(Dd * (Da + W - 1))) +
((Da * (Da - 2))/(Dd * (Dd - 2))))
# determining the scs
}else if("U" %in% sexchroms){
# counting sex chromosomes
U <- sum(sexchroms == "U")
V <- sum(sexchroms == "V")
# ensuring that the UV probability will be accurate
if(U != V)stop('UV scs results are only accurate if the number of U chromosomes
equals the number of V')
# all diploids are heterogametic so setting mud = 0 gets rid of that area of the equation
if(mud != 0)stop('Because the diploid phase is always heterogametic, mud must be
set to 0 for UV scs.')
# calcuating other parameters
Ds <- Dd <- U + V + Da
# performing the calculation
res <- 1 - mud * ((Da * (Da - 2) + 4 * U * (U - 1)) / (Dd * (Dd - 2))) -
(1 - mud) * (((U * (U - 1))/(Ds * (Da + U - 1))) +
((V * (V - 1))/(Ds * (Da + V - 1))) +
((Da * (Da - 2))/(Ds * (Ds - 2))))
# if the scs us not some sort of XY ZW or UV
}else stop('scs must contain an X, Z or U (not case sensitive).')
return(res)
}
maxnum <- 60
XO <- Pfsa(Da=seq(from=2, to=maxnum, by=2), scs="XO")
XY <- Pfsa(Da=seq(from=2, to=maxnum, by=2), scs="XY")
XYY <- Pfsa(Da=seq(from=2, to=maxnum, by=2), scs="XYY")
XXY <- Pfsa(Da=seq(from=2, to=maxnum, by=2), scs="XXY")
X5Y5 <- Pfsa(Da=seq(from=2, to=maxnum, by=2), scs="XXXXXYYYYY")
rates <- c(XO,XY,XYY,XXY, X5Y5)
types <- rep(c("XO", "XY", "XYY","XXY","X5Y5"), each=length(XO))
autosomes <- rep(seq(from=2, to=maxnum, by=2), times=5)
res <- data.frame(rates, types, autosomes)
library(ggplot2)
ggplot(res, aes(y=rates, x=autosomes)) +
geom_point(aes(colour=types), stat="identity", position="identity", alpha=0.5, size=3) +
geom_line(aes(colour=types), stat="identity", position="identity", alpha=0.5) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=15, hjust=0.5, vjust=0.5)) +
scale_size(range=c(1, 3)) +
xlab("Diploid autosome count") +
ylab("Proportion of SA fusions")
